#!/usr/bin/env python

import sys, os
import logging

import numpy as np

from gprot.aigrain import AigrainLightCurve

def get_prot(i, aigrain=True, kepler=False):
    if aigrain:
        lc = AigrainLightCurve(i)
    elif kepler:
        lc = KeplerLightCurve(i)

    return lc.acf_prot()

class ProtWorker(object):
    def __init__(self, **kwargs):
        self.kwargs = kwargs

    def __call__(self, i):
        return get_prot(i, **self.kwargs)

if __name__=='__main__':
    import argparse
    import schwimmbad

    parser = argparse.ArgumentParser(description='Calculate ACF prots for given stars')

    parser.add_argument('stars', nargs='+', type=int, help='Stars to fit.')
    parser.add_argument('--file', '-f', default=None, help='filename of list of stars.')

    datagroup = parser.add_mutually_exclusive_group()
    datagroup.add_argument("--aigrain", dest="aigrain", action='store_true',
                        default=True,
                       help="Use Aigrain simulations.")
    datagroup.add_argument("--kepler", dest="kepler", action='store_true',
                       help="Use Kepler data.")

    group = parser.add_mutually_exclusive_group()
    group.add_argument("--ncores", dest="n_cores", default=1,
                       type=int, help="Number of processes (uses multiprocessing).")
    group.add_argument("--mpi", dest="mpi", default=False,
                       action="store_true", help="Run with MPI.")

    args = parser.parse_args()

    pool = schwimmbad.choose_pool(mpi=args.mpi, processes=args.n_cores)

    worker = ProtWorker(aigrain=args.aigrain, kepler=args.kepler)
    
    if args.file is not None:
        stars = np.loadtxt(args.file)
    else:
        stars = args.stars

    prots = pool.map(worker, stars)

    for star, (p, h) in zip(stars, prots):
        print('{} {:.3f} {:.3f}'.format(star, p, h))

