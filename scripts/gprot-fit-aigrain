#!/usr/bin/env python

import sys, os
import logging

from gprot.aigrain import AigrainLightCurve
from gprot.model import GPRotModel
from gprot.config import POLYCHORD
from gprot.fit import fit_mnest, fit_emcee3

def fit_polychord(i, test=False, nlive=1000):
    raise NotImplementedError

    sys.path.append(POLYCHORD)
    import PyPolyChord.PyPolyChord as PolyChord

    lc = AigrainLightCurve(i)
    mod = GPRotModel(lc)
    basename = str(i)
    if test:
        print('Will run polychord on star {}...'.format(i))
    else:
        _ = PolyChord.run_nested_sampling(mod.polychord_lnpost, 5, 0,
                        prior=mod.polychord_prior,
                        file_root=basename, n_live_points=nlive)    

def get_model(i, ndays=None, subsample=40, chunksize=200):
    lc = AigrainLightCurve(i, ndays, subsample, chunksize=chunksize)
    mod = GPRotModel(lc)
    return mod    

def _fit_emcee3(i, ndays=None, subsample=40, chunksize=200, **kwargs):
    mod = get_model(i, ndays=ndays, subsample=subsample, chunksize=chunksize)
    fit_emcee3(mod, **kwargs)

def _fit_mnest(i, ndays=None, subsample=40, chunksize=200, **kwargs):
    mod = get_model(i, ndays=ndays, subsample=subsample, chunksize=chunksize)
    basename = os.path.join('chains',str(i))
    fit_mnest(mod, basename=basename, **kwargs)

if __name__=='__main__':
    import argparse

    parser = argparse.ArgumentParser()

    parser.add_argument('stars', nargs='*', type=int)
    parser.add_argument('--test', action='store_true')
    parser.add_argument('--polychord', action='store_true')
    parser.add_argument('-v', '--verbose', action='store_true')
    parser.add_argument('--resultsdir', default='results')
    parser.add_argument('-n', '--ndays', default=None, type=int)
    parser.add_argument('--subsample', default=40, type=int)
    parser.add_argument('--nlive', default=1000, type=int)
    parser.add_argument('--chunksize', default=200, type=int)
    parser.add_argument('--emcee3', action='store_true')
    parser.add_argument('--nwalkers', default=200, type=int)
    parser.add_argument('--iter_chunksize', default=50, type=int)
    parser.add_argument('-p', '--processes', default=None, type=int)
    parser.add_argument('--targetn', default=6, type=int)
    parser.add_argument('--maxiter', default=100, type=int)
    parser.add_argument('-o', '--overwrite', action='store_true')

    args = parser.parse_args()

    N = len(args.stars)
    for i,ix in enumerate(args.stars):
        print('{} of {}: {}'.format(i+1, N, ix))
        try:
            if args.polychord:
                fit_polychord(ix, test=args.test)
            if args.emcee3:
                _fit_emcee3(ix, ndays=args.ndays, subsample=args.subsample,
                            chunksize=args.chunksize, targetn=args.targetn,
                            iter_chunksize=args.iter_chunksize, 
                            nwalkers=args.nwalkers, processes=args.processes,
                            verbose=args.verbose, maxiter=args.maxiter, 
                            overwrite=args.overwrite)
            else:
                _fit_mnest(ix, test=args.test, verbose=args.verbose, 
                          ndays=args.ndays, subsample=args.subsample,
                          resultsdir=args.resultsdir, n_live_points=args.nlive,
                          chunksize=args.chunksize, overwrite=args.overwrite)
        except:
            import traceback
            traceback.print_exc()
            logging.error('Error with {}; traceback above.'.format(ix))
