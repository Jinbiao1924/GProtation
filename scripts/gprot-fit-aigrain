#!/usr/bin/env python

import sys, os
import logging

from gprot.aigrain import AigrainLightCurve
from gprot.model import GPRotModel
from gprot.config import POLYCHORD

def fit_polychord(i, test=False):
    sys.path.append(POLYCHORD)
    import PyPolyChord.PyPolyChord as PolyChord

    lc = AigrainLightCurve(i)
    mod = GPRotModel(lc)
    basename = str(i)
    if test:
        print('Will run polychord on star {}...'.format(i))
    else:
        _ = PolyChord.run_nested_sampling(mod.polychord_lnpost, 5, 0,
                        prior=mod.polychord_prior,
                        file_root=basename)    

def fit_mnest(i, test=False, verbose=False, resultsdir='results', 
              ndays=600, subsample=20, **kwargs):
    import pymultinest

    lc = AigrainLightCurve(i, ndays, subsample)
    mod = GPRotModel(lc)
    basename = os.path.join('chains',str(i))
    if test:
        print('Will run multinest on star {}...'.format(i))
    else:
        _ = pymultinest.run(mod.mnest_loglike, mod.mnest_prior, 5, 
                            verbose=verbose, outputfiles_basename=basename, 
                            **kwargs)

        if not os.path.exists(resultsdir):
            os.makedirs(resultsdir)

        df = GPRotModel.get_mnest_samples(basename)
        samplefile = os.path.join(resultsdir, '{}.h5'.format(i))
        df.to_hdf(samplefile, 'df')
        print('Samples saved to {}.'.format(samplefile))
        figfile = os.path.join(resultsdir, '{}.png'.format(i))
        fig = lc.corner_plot()
        fig.savefig(figfile)
        print('Corner plot saved to {}.'.format(figfile))


if __name__=='__main__':
    import argparse

    parser = argparse.ArgumentParser()

    parser.add_argument('stars', nargs='*', type=int)
    parser.add_argument('--test', action='store_true')
    parser.add_argument('--polychord', action='store_true')
    parser.add_argument('-v', '--verbose', action='store_true')
    parser.add_argument('--resultsdir', default='results')
    parser.add_argument('-n', '--ndays', default=600, type=int)
    parser.add_argument('--subsample', default=20, type=int)

    args = parser.parse_args()

    for i in args.stars:
        try:
            if args.polychord:
                fit_polychord(i, test=args.test)
            else:
                fit_mnest(i, test=args.test, verbose=args.verbose, 
                          ndays=args.ndays, subsample=args.subsample,
                          resultsdir=args.resultsdir)
        except:
            import traceback
            traceback.print_exc()
            logging.error('Error with {}; traceback above.'.format(i))
